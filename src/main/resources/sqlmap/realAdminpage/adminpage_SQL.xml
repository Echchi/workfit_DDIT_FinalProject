<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="kr.or.workFit.mapper.adminpage.AdminpageMapper">
	
	<select id="selectCoInfo" parameterType="String" resultType="String">
		select CO_BUY_SERVICE from CO where CO_CODE = #{memCo}
	</select>
	
	
	<select id="selectMyMember" parameterType="string" resultType="memberVO">
		select mem_id, MEM_DEPT_ID from member where CO_CODE = #{memCo}
	</select>
	
	<insert id="insertPayment" parameterType="map">
		insert into
		PAYMENT_HISTORY(
		PAYMENT_HISTORY_CODE,
		CO_CODE_FK,
		SERVICE_CODE,
		SERVICE_PRICE,
		SERVICE_DATE
		)
		values(
		#{payNum},
		#{memCo},
		#{serviceName},
		#{price},
		sysdate)
	</insert>

	<select id="checkCompany" parameterType="string"
		resultType="int">
		select count(CO_CODE_FK) from PAYMENT_HISTORY where
		CO_CODE_FK = #{memCo}
	</select>

	<update id="updatePayment" parameterType="map">
		update CO
		set CO_BUY_SERVICE = #{serviceName},
		CO_STORAGE_SIZE = #{storageSize},
		CO_USER_SIZE = #{users}
		where CO_CODE = #{memCo}
	</update>
	
	<!-- 전체 멤버 출력 -->
	<select id="selectMember" parameterType="String" resultType="memberVO">
		select * from member where CO_CODE = #{memCo} 
	</select>
	
	<select id="selectMemberInStop" parameterType="String" resultType="map">
		select 
			a.MEM_DEPT_ID as memDeptId,
			a.MEM_NAME as memName,
			a.MEM_JOB_GRADE as memJobGrade,
			b.DEPT_NAME as deptName,
			b.DEPT_CODE as deptCode,
			a.MEM_ID as memId,
			a.MEM_PASS as memPass,
			a.MEM_SECPASS as memSecpass,
			a.MEM_EMAIL as memEmail,
			a.MEM_WORK_START_DAY as memWorkStartDay,
			a.MEM_BIRTH as memBirth,
            a.USAGE_STATUS as usageStatus,
            c.DECEASE_DATE as deceaseDate
		from member a
		 	left join DEPT b
		 	on a.DEPT_FK = b.DEPT_CODE 
            left join DECEASE c
            on a.mem_id = c.mem_id
		where a.CO_CODE = #{memCo} and a.USAGE_STATUS = '1'
	</select>
	
	<select id="selectDeptListInAdmin" parameterType="String" resultType="deptVO">
		select 
			a.*, 
			b.CO_USER_SIZE 
		from 
			dept a 
		left join 
			co b 
		on a.CO_CODE = b.CO_CODE
		where a.CO_CODE = #{memCo}
	</select>
	
	<!-- 부서 배정 완료 멤버 출력 -->
	<select id="selectMemberInDept" parameterType="String" resultType="map">
		select  
			NVL(b.MEM_AUTH,'미부여') as memAuth, 
			a.MEM_DEPT_ID as memDeptId,
			a.MEM_NAME as memName,
			a.MEM_JOB_GRADE as memJobGrade,
			c.DEPT_NAME as deptName,
			c.DEPT_CODE as deptCode,
			a.MEM_ID as memId,
			a.MEM_PASS as memPass,
			a.MEM_SECPASS as memSecpass,
			a.MEM_EMAIL as memEmail,
			a.MEM_WORK_START_DAY as memWorkStartDay,
			a.MEM_BIRTH as memBirth
		from member a
		    left join MEM_AUTH b
		    on a.MEM_ID = b.MEM_ID
		    left join DEPT c
		    on a.DEPT_FK = c.DEPT_CODE
		where a.CO_CODE = #{memCo}
			and a.DEPT_FK not in (#{memCo}||'-N')
			and a.USAGE_STATUS = '0'
	</select>
	
	<!-- 부서 미배정 멤버 출력 -->
	<select id="selectMemberNotInDept" parameterType="String" resultType="map">
		select  
			NVL(b.MEM_AUTH,'미부여') as memAuth, 
			a.MEM_DEPT_ID as memDeptId,
			a.MEM_NAME as memName,
			a.MEM_JOB_GRADE as memJobGrade,
			c.DEPT_NAME as deptName,
			c.DEPT_CODE as deptCode,
			a.MEM_ID as memId,
			a.MEM_PASS as memPass,
			a.MEM_SECPASS as memSecpass,
			a.MEM_EMAIL as memEmail,
			a.MEM_WORK_START_DAY as memWorkStartDay,
			a.MEM_BIRTH as memBirth
		from member a
		    left join MEM_AUTH b
		    on a.MEM_ID = b.MEM_ID
		    left join DEPT c
		    on a.DEPT_FK = c.DEPT_CODE
		where a.CO_CODE = #{memCo}
			and a.DEPT_FK = #{memCo}||'-N'
			and a.USAGE_STATUS = '0'
	</select>
	
	<!-- 신규 유저 추가 -->
	<insert id="addUser" parameterType="list">
		<foreach collection="list" item="item" index="index" separator=";" open="DECLARE BEGIN" close="; END;">
			insert into member
				(MEM_ID, 
				DEPT_FK,
				CO_CODE,
				MEM_DEPT_ID,
				MEM_NAME,
				MEM_JOB_GRADE, 
				MEM_PASS,
				MEM_SECPASS, 
				MEM_BIRTH, 
				MEM_TEL, 
				MEM_EMAIL, 
				MEM_EN_NAME, 
				MEM_INTRO, 
				MEM_EDU, 
				MEM_ZIPCODE, 
				MEM_ADDR, 
				MEM_ADDR_DETAIL, 
				MEM_DEPT_TEL, 
				MEM_WORK_START_DAY, 
				MEM_WORKTYPE,
				MEM_GENDER,
				MEM_SALARY
				)
				values
				(
				#{item.coCode}||#{item.memDeptId}||SEQ_MEMBER.nextval,
				#{item.dept},
				#{item.coCode},
				#{item.memDeptId},
				#{item.memName},
				#{item.memJobGrade, jdbcType=VARCHAR},
				#{item.memPass, jdbcType=VARCHAR},
				#{item.memSecpass, jdbcType=VARCHAR},
				#{item.memBirth, jdbcType=DATE},
				#{item.memTel, jdbcType=VARCHAR},
				#{item.memEmail, jdbcType=VARCHAR},
				#{item.memEnName, jdbcType=VARCHAR},
				#{item.memIntro, jdbcType=VARCHAR}, 										
				#{item.memEdu, jdbcType=VARCHAR},
				#{item.memZipcode, jdbcType=VARCHAR},	
				#{item.memAddr, jdbcType=VARCHAR},	
				#{item.memAddrDetail, jdbcType=VARCHAR},	
				#{item.memDeptTel, jdbcType=VARCHAR},
				#{item.memWorkStartDay, jdbcType=DATE},	
				#{item.memWorktype, jdbcType=VARCHAR},
				#{item.memGender, jdbcType=CHAR},
				#{item.memSalary, jdbcType=BIGINT}
				)
		</foreach>
	</insert>
	
	<update id="deleteMember" parameterType="list">
		<foreach collection="list" item="item" index="index" separator=";" open="DECLARE BEGIN" close="; END;">
			update member 
				set	USAGE_STATUS = '1'
				where MEM_ID = #{item.memId}
		</foreach>
	</update>
	
	<insert id="insertDecease" parameterType="list">
		<foreach collection="list" item="item" index="index" separator=";" open="DECLARE BEGIN" close="; END;">
			insert into DECEASE(
				DECEASE_CODE,
				MEM_ID,
				DECEASE_DATE
				)
				values(
				SEQ_DECEASE.nextval,
				#{item.memId},
				sysdate
				)			
		</foreach>
	</insert>
	
	<update id="assignMember" parameterType="list">
		<foreach collection="list" item="item" index="index" separator=";" open="DECLARE BEGIN" close="; END;">
			update member 
				set	DEPT_FK = #{item.dept}
				where MEM_ID = #{item.memId}
		</foreach>
	</update>
	
	<insert id="insertAuth" parameterType="list">
		
		<foreach collection="list" item="item" index="index" separator=";" open="DECLARE BEGIN" close="; END;">
			insert into MEM_AUTH 
			values
			('AUTH-'||SEQ_MEM_AUTH.nextval,
			#{item.memId},
			#{item.auth})
		</foreach>
		
	</insert>
</mapper>